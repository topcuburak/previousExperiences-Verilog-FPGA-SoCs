module factorial(output reg [31:0] product, 
					  input [15:0] N,
					  input clk
					  );
	reg [15:0] temp_N;				  
	reg signed [15:0] A;
	reg [31:0] product_temp;
	reg [15:0] Q,M;
	reg Q_1;
	reg [4:0] count;
	reg state;

initial 
	begin
		A<=0;
		M<=N;
		Q<=(N-1);
		Q_1<=0;      
		state<=0;
		count<=16;
		product<=0;
		temp_N<=(N-1);
	end

always @(posedge clk)
	begin
		if(state==0)
		begin
			if (count!=0)
					begin
						if((Q[0]==0)&&(Q_1==1))
							A<=A+M;
						else if ((Q[0]==1)&&(Q_1==0)) 
							A<=A-M;
					end
				state<=1;
		end
		else if((state==1)&&(count!=0))
			begin
				{A,Q,Q_1}= {A[15],A,Q};
				count<=count-1;
				state<=0;
				if(count==1)
					begin
					temp_N<=temp_N-1;
					end
			end	
		else if ((count==0)&&(temp_N!=0))
			begin
				product_temp <={A,Q};
				product<=product+product_temp;
				count<=16;
				A<=0;
				M<=product_temp;
				Q<=temp_N-1;
			end
	end
endmodule
	
